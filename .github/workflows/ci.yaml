name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  GHC_VERSIONS: "9.4.8 9.6.6 9.8.4 9.10.1"

jobs:
  # Check code formatting
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Run clippy linting
  clippy:
    name: Clippy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features -- -D warnings

  # Check that project compiles
  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --all-features
      - run: cargo check --no-default-features

  # Run tests
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      # Install nextest for faster test execution
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      
      # Install Haskell toolchain for integration tests
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        if: matrix.os != 'windows-latest'  # Skip Haskell on Windows for now
        with:
          ghc-version: '9.6'
          enable-stack: false
          cabal-version: 'latest'
      
      # Run unit tests
      - name: Run unit tests
        run: cargo nextest run --lib --bins
      
      # Run integration tests (may fail on systems without Haskell)
      - name: Run integration tests
        run: cargo nextest run --tests
        continue-on-error: ${{ matrix.os == 'windows-latest' }}  # Allow Windows to fail integration tests

  # Check documentation builds
  doc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Check MSRV (Minimum Supported Rust Version)
  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read MSRV from Cargo.toml
        id: msrv
        run: |
          msrv=$(grep -E "^rust-version" Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
          if [ -z "$msrv" ]; then
            echo "No MSRV found, using 1.82.0 (required by dependencies)"
            msrv="1.82.0"
          fi
          echo "msrv=$msrv" >> $GITHUB_OUTPUT
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --all-features

  # Test coverage (optional, runs on main branch only)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Setup Haskell for integration tests
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.6'
          enable-stack: false
          cabal-version: 'latest'
      - name: Generate coverage
        run: cargo llvm-cov nextest --all-features --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false